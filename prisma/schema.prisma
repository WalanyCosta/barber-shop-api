generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model account {
    id                    String   @id @default(uuid())
    name                  String
    email                 String
    password              String
    phone                 String
    accessToken           String
    subscribeNotification Boolean  @default(false)
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt

    notification notification[]
    schedule     schedule[]
}

model category {
    id       String @id @default(uuid())
    category String

    service service[]
}

model service {
    id        String @id @default(uuid())
    service   String
    price     Float
    stars     Int
    status    String
    discount  Float
    duraction Int

    categoryId String
    category   category @relation(fields: [categoryId], references: [id])

    schedule_service schedule_service[]
}

model notification {
    id        String   @id @default(uuid())
    title     String
    body      String
    date      DateTime
    status    String
    reference String?

    accountId String
    account   account @relation(fields: [accountId], references: [id])
}

model barber {
    id              String   @id @default(uuid())
    name            String
    birthday        DateTime
    email           String
    phone           String
    experience      String
    experience_year Int
    start           Int
    status          String
    image_url       String

    schedule schedule[]
}

model schedule {
    id         String   @id @default(uuid())
    total_time Int
    status     String
    createAt   DateTime @default(now())
    updateAt   DateTime @updatedAt

    account_id String?
    account    account? @relation(fields: [account_id], references: [id])

    barber_id String
    barber    barber @relation(fields: [barber_id], references: [id])

    time_schedule    time_schedule[]
    payment          payment[]
    schedule_service schedule_service[]
}

model time_schedule {
    id            String   @id @default(uuid())
    date_schedule DateTime
    time_schedule Int

    schedule_id String
    schedule    schedule @relation(fields: [schedule_id], references: [id])
}

model payment {
    id        String   @id @default(uuid())
    type_pay  String
    amount    Float
    total     Float
    status    String
    create_at DateTime @default(now())
    update_at DateTime @updatedAt

    schedule_id String
    schedule    schedule @relation(fields: [schedule_id], references: [id])
}

model schedule_service {
    id String @id @default(uuid())

    serviceId String?
    service   service? @relation(fields: [serviceId], references: [id])

    scheduleId String?
    schedule   schedule? @relation(fields: [scheduleId], references: [id])
}
